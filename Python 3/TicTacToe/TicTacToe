##Board Elements
# Dictionary with each playable position
posdict = {"1": " ", "2": " ", "3": " ", "4": " ", "5": " ", "6": " ", "7": " ", "8": " ", "9": " "}

# Other elements
sep = "|"

# Lists of all possible win combinations:
botWin = ["1", "2", "3"]
midHorWin = ["4", "5", "6"]
topWin = ["7", "8", "9"]

leftWin = ["1", "4", "7"]
midVerWin = ["2", "6", "8"]
rightWin = ["3", "6", "9"]

diagForwardWin = ["1", "5", "9"]
diagBackwardWin = ["3", "5", "7", ]

winCombinations = [botWin, midHorWin, topWin, leftWin, midVerWin, rightWin, diagForwardWin, diagBackwardWin]

# Global variables
playerTurn = 1
playedMoves = []
player1Type = ""
player2Type = ""
player1Name = ""
player2Name = ""

from IPython.display import clear_output


##Functions

# Check whether someone has won
def checkVictory():
    if len(playedMoves) < 5:
        askPlayerInput()

    winner = False

    for (a, b, c) in winCombinations:
        x = posdict[a] + posdict[b] + posdict[c]
        if len(set(x)) == 1 and " " not in x:
            declareVictory()
            winner = True
            break

    if len(playedMoves) == 9:
        print("It's a TIE!")

    elif winner == False:
        askPlayerInput()


# Declare who the winner is
def declareVictory():
    if len(playedMoves) == 9:
        print("It's a TIE!")

    elif playerTurn % 2 != 0:
        return print(f"Congratulations {player2Name}, you win!")
    else:
        return print(f"Congratulations {player1Name}, you win!")


# Start the game and reset the board and other global variables
def playTicTacToe(a="Player 1", b="Player 2"):
    '''
    A simple game of TicTacToe. You can specify names for the two players by putting them in as string arguments.
    '''
    global posdict
    global playerTurn
    global playedMoves
    global player1Type
    global player2type
    global player1Name
    global player2Name

    posdict = {"1": " ", "2": " ", "3": " ", "4": " ", "5": " ", "6": " ", "7": " ", "8": " ", "9": " "}
    player1Name = a
    player2Name = b
    playerTurn = 1
    playedMoves = []
    player1Type = ""
    player2Type = ""

    drawBoardIntro()


# Player 1 chooses either X or O
def player1ChooseType():
    global player1Type
    global player2Type

    types = ["X", "O"]

    print(
        "Welcome to TicTacToe. To play a piece in a field, simple type the number corresponding to it when it's your turn")
    player1Type = input(f'Which kind of piece do you want to play {player1Name}, X or O?')

    if player1Type not in types:
        print("Please choose a valid option")
        player1ChooseType()

    elif "X" in player1Type:
        player2Type = "O"
        askPlayerInput()
    else:
        player2Type = "X"
        askPlayerInput()

    # A player makes the next move    


def askPlayerInput():
    global playedMoves

    if playerTurn % 2 != 0:
        playerInput = input(f"{player1Name}, it's your turn")
    else:
        playerInput = input(f"{player2Name}, it's your turn")

    if playerInput not in range (1-10):
        print('Please make a valid move')
        askPlayerInput()
        
    if playerInput in playedMoves:
        print("That field has already been played")
        askPlayerInput()

    else:
        playedMoves.append(playerInput)
        setPlayerInput(playerInput)


# The move just made is added to the board        
def setPlayerInput(x):
    global playerTurn
    global player1Type
    global player2Type

    if playerTurn % 2 != 0:
        posdict[x] = player1Type

    else:
        posdict[x] = player2Type

    playerTurn += 1
    drawBoard()


# The board is drawn with the newest move added
def drawBoard():
    player1Info = f'{player1Name}: {player1Type}'
    player2Info = f'{player2Name}: {player2Type}'
    botRow = posdict["1"] + sep + posdict["2"] + sep + posdict["3"]
    midRow = posdict["4"] + sep + posdict["5"] + sep + posdict["6"]
    topRow = posdict["7"] + sep + posdict["8"] + sep + posdict["9"]

    fullBoard = "{}\n{}\n\n{}\n{}\n{}".format(player1Info, player2Info, topRow, midRow, botRow)

    clear_output(wait=True)
    print(fullBoard)
    checkVictory()


# The board as shown in the Intro
def drawBoardIntro():
    player1Info = f'{player1Name}: {player1Type}'
    player2Info = f'{player2Name}: {player2Type}'
    botRow = "1" + sep + "2" + sep + "3"
    midRow = "4" + sep + "5" + sep + "6"
    topRow = "7" + sep + "8" + sep + "9"

    fullBoard = "{}\n{}\n\n{}\n{}\n{}".format(player1Info, player2Info, topRow, midRow, botRow)

    print(fullBoard)
    player1ChooseType()

