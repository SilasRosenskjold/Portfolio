## Collection of Exchange rates for Currencies 
## Note that the account shows DKK per default, and as such this is not saved as a variable
## My next challenge is to source this information from an online up-to-date database


#Currencies
eur_exchange_rate = 0.133809
usd_exchange_rate = 0.148610
gbp_exchange_rate = 0.113742
cny_exchange_rate = 1.03248 #Chinese Yuan Renminbi
jpy_exchange_rate = 16.2732 #Japanese Yen
xbt_exchange_rate = 0.0000189653 #Bitcoin

#A nested list contai
currencies = (["DKK","kr",1],["EUR","€",eur_exchange_rate],["USD","$",usd_exchange_rate],["GBP","£",gbp_exchange_rate],["CNY","元",cny_exchange_rate],["JPY","¥",jpy_exchange_rate],["XBT","₿",xbt_exchange_rate])


class BankAccount():
    
    def __init__ (self,name,balance=0):
        self.name = name
        self.balance = balance
        
        self.currency = currencies[0]
        self.account_name = name + "'s bank account'"
        
        print(f'Thank you for setting up a new account {name}.')
        
class CheckingAccount(BankAccount):
    
    def check(self):
        balance_calculated = float(self.balance)*self.currency[2]
        return print('Your current balance is {} {}'.format(float(balance_calculated),self.currency[1]))
    
    def deposit(self,deposit):
        #self.deposit = deposit
        if type(deposit) in (float,int):
            self.balance = float(deposit) + self.balance
            print('{} has been deposited to your account, your new balance is {} {}'.format(deposit,self.balance,self.currency[1]))
        else:
            print('Please provide a number')
            
    def withdraw(self,withdraw):
        #self.withdraw = withdraw
        if type(withdraw) in (float,int):
            
            if withdraw > self.balance:
                print('Sorry there is not coverage on your account for that amount')
                
            else:
                self.balance = self.balance - float(withdraw) 
                print('{} has been withdrawn from your account, your new balance is {} {}'.format(withdraw,self.balance,self.currency[1]))
                return withdraw
        else:
            print('Please provide a number')
    
    def change_currency(self,selected_currency):
            for i in range(len(currencies)):
            
                if selected_currency == currencies[i][0]:
                    self.currency = currencies[i]
                    return print("Your Checkings Account will show your balance in the currency {}".format(self.currency[0]))
            
            return print("Please provide a valid currency. Currently you can choose from these options:\nEUR: Euro\nUSD: US Dollars\nGBP: British Pounds\nCNY: Chinese Yuan\nJPY: Japanese Yen\nXBT: Bitcoin"
